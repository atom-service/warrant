// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: standard.proto

package standard

import (
	encoding_json "encoding/json"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	golang_org_x_net_context "golang.org/x/net/context"
	google_golang_org_grpc "google.golang.org/grpc"
	io "io"
	log "log"
	math "math"
	net_http "net/http"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var DefaultHtmlStringer = func(req, resp interface{}) ([]byte, error) {
	header := []byte("<p><div class=\"container\"><pre>")
	data, err := encoding_json.MarshalIndent(resp, "", "\t")
	if err != nil {
		return nil, err
	}
	footer := []byte("</pre></div></p>")
	return append(append(header, data...), footer...), nil
}

func Serve(httpAddr, grpcAddr string, stringer func(req, resp interface{}) ([]byte, error), opts ...google_golang_org_grpc.DialOption) {
	handler, err := NewHandler(grpcAddr, stringer, opts...)
	if err != nil {
		log.Fatalf("NewHandler(%q) = %v", grpcAddr, err)
	}
	if err := net_http.ListenAndServe(httpAddr, handler); err != nil {
		log.Fatal(err)
	}
}
func NewHandler(grpcAddr string, stringer func(req, resp interface{}) ([]byte, error), opts ...google_golang_org_grpc.DialOption) (net_http.Handler, error) {
	conn, err := google_golang_org_grpc.Dial(grpcAddr, opts...)
	if err != nil {
		return nil, err
	}
	mux := net_http.NewServeMux()
	QueuesClient := NewQueuesClient(conn)
	QueuesServer := NewHTMLQueuesServer(QueuesClient, stringer)
	mux.HandleFunc("/Queues/CreateTask", QueuesServer.CreateTask)
	mux.HandleFunc("/Queues/QueryTaskByID", QueuesServer.QueryTaskByID)
	mux.HandleFunc("/Queues/CancelTaskByID", QueuesServer.CancelTaskByID)
	mux.HandleFunc("/Queues/QueryTaskByOwner", QueuesServer.QueryTaskByOwner)
	mux.HandleFunc("/Queues/QueryTaskByHashCode", QueuesServer.QueryTaskByHashCode)
	mux.HandleFunc("/Queues/QueryLengthByChannel", QueuesServer.QueryLengthByChannel)
	mux.HandleFunc("/Queues/ReportTaskResult", QueuesServer.ReportTaskResult)
	mux.HandleFunc("/Queues/ReceiveQueueByChannel", QueuesServer.ReceiveQueueByChannel)
	return mux, nil
}

type htmlQueues struct {
	client   QueuesClient
	stringer func(req, resp interface{}) ([]byte, error)
}

func NewHTMLQueuesServer(client QueuesClient, stringer func(req, resp interface{}) ([]byte, error)) *htmlQueues {
	return &htmlQueues{client, stringer}
}

var FormQueues_CreateTask string = `<div class="container"><div class="jumbotron">
	<h3>Queues: CreateTask</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"CreateTaskRequest_RootKeyword": buildCreateTaskRequest_RootKeyword(emptyIfNull(null)),
"Task_Task": buildTask_Task(emptyIfNull(null)),}
	function buildTask_Task(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="Task_Task" fieldname="Task" repeated="false">';
s += '<div class="row"><div class="col-sm-2">'
s += '<a href="#" class="del-child btn btn-danger btn-xs" role="button" fieldname="Task">Remove</a>'
s += '</div><div class="col-sm-10">'
s += '<label class="heading">Task</label>'
s += '</div></div>'
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Next: </label><div class="col-sm-10"><input class="form-control" name="Next" type="number" step="1" '+setValue(0, json["Next"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Prior: </label><div class="col-sm-10"><input class="form-control" name="Prior" type="number" step="1" '+setValue(0, json["Prior"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Owner: </label><div class="col-sm-10"><input class="form-control" name="Owner" type="number" step="1" '+setValue(0, json["Owner"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">State: </label><div class="col-sm-10"><input class="form-control" name="State" type="text" '+setStrValue("", json["State"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Input: </label><div class="col-sm-10"><input class="form-control" name="Input" type="text" '+setStrValue("", json["Input"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Output: </label><div class="col-sm-10"><input class="form-control" name="Output" type="text" '+setStrValue("", json["Output"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Channel: </label><div class="col-sm-10"><input class="form-control" name="Channel" type="text" '+setStrValue("", json["Channel"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">HashCode: </label><div class="col-sm-10"><input class="form-control" name="HashCode" type="text" '+setStrValue("", json["HashCode"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">RetryCount: </label><div class="col-sm-10"><input class="form-control" name="RetryCount" type="number" step="1" '+setValue(0, json["RetryCount"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">CreateTime: </label><div class="col-sm-10"><input class="form-control" name="CreateTime" type="text" '+setStrValue("", json["CreateTime"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">UpdateTime: </label><div class="col-sm-10"><input class="form-control" name="UpdateTime" type="text" '+setStrValue("", json["UpdateTime"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">RetryMaxLimit: </label><div class="col-sm-10"><input class="form-control" name="RetryMaxLimit" type="number" step="1" '+setValue(0, json["RetryMaxLimit"])+'/></div></div>';
				

		s += '</div>';
		return s;
		}

function buildCreateTaskRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="CreateTaskRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="children" type="Task_Task">' + buildTask_Task(json["Task"]);
			s += '</div>';
		s += setLink(json, "Task_Task", "Task", "");
		

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["CreateTaskRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildCreateTaskRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./CreateTask?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlQueues) CreateTask(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Queues`, `CreateTask`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &CreateTaskRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormQueues_CreateTask))
	if someValue {
		reply, err := this.client.CreateTask(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormQueues_QueryTaskByID string = `<div class="container"><div class="jumbotron">
	<h3>Queues: QueryTaskByID</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"QueryTaskByIDRequest_RootKeyword": buildQueryTaskByIDRequest_RootKeyword(emptyIfNull(null)),}
	function buildQueryTaskByIDRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="QueryTaskByIDRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["QueryTaskByIDRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildQueryTaskByIDRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./QueryTaskByID?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlQueues) QueryTaskByID(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Queues`, `QueryTaskByID`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &QueryTaskByIDRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormQueues_QueryTaskByID))
	if someValue {
		reply, err := this.client.QueryTaskByID(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormQueues_CancelTaskByID string = `<div class="container"><div class="jumbotron">
	<h3>Queues: CancelTaskByID</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"CancelTaskByIDRequest_RootKeyword": buildCancelTaskByIDRequest_RootKeyword(emptyIfNull(null)),}
	function buildCancelTaskByIDRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="CancelTaskByIDRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["CancelTaskByIDRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildCancelTaskByIDRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./CancelTaskByID?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlQueues) CancelTaskByID(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Queues`, `CancelTaskByID`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &CancelTaskByIDRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormQueues_CancelTaskByID))
	if someValue {
		reply, err := this.client.CancelTaskByID(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormQueues_QueryTaskByOwner string = `<div class="container"><div class="jumbotron">
	<h3>Queues: QueryTaskByOwner</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"QueryTaskByOwnerRequest_RootKeyword": buildQueryTaskByOwnerRequest_RootKeyword(emptyIfNull(null)),}
	function buildQueryTaskByOwnerRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="QueryTaskByOwnerRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">Owner: </label><div class="col-sm-10"><input class="form-control" name="Owner" type="number" step="1" '+setValue(0, json["Owner"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Limit: </label><div class="col-sm-10"><input class="form-control" name="Limit" type="number" step="1" '+setValue(0, json["Limit"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">Offset: </label><div class="col-sm-10"><input class="form-control" name="Offset" type="number" step="1" '+setValue(0, json["Offset"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["QueryTaskByOwnerRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildQueryTaskByOwnerRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./QueryTaskByOwner?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlQueues) QueryTaskByOwner(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Queues`, `QueryTaskByOwner`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &QueryTaskByOwnerRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormQueues_QueryTaskByOwner))
	if someValue {
		reply, err := this.client.QueryTaskByOwner(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormQueues_QueryTaskByHashCode string = `<div class="container"><div class="jumbotron">
	<h3>Queues: QueryTaskByHashCode</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"QueryTaskByHashCodeRequest_RootKeyword": buildQueryTaskByHashCodeRequest_RootKeyword(emptyIfNull(null)),}
	function buildQueryTaskByHashCodeRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="QueryTaskByHashCodeRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">HashCode: </label><div class="col-sm-10"><input class="form-control" name="HashCode" type="text" '+setStrValue("", json["HashCode"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["QueryTaskByHashCodeRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildQueryTaskByHashCodeRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./QueryTaskByHashCode?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlQueues) QueryTaskByHashCode(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Queues`, `QueryTaskByHashCode`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &QueryTaskByHashCodeRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormQueues_QueryTaskByHashCode))
	if someValue {
		reply, err := this.client.QueryTaskByHashCode(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormQueues_QueryLengthByChannel string = `<div class="container"><div class="jumbotron">
	<h3>Queues: QueryLengthByChannel</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"QueryLengthByChannelRequest_RootKeyword": buildQueryLengthByChannelRequest_RootKeyword(emptyIfNull(null)),}
	function buildQueryLengthByChannelRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="QueryLengthByChannelRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">Channel: </label><div class="col-sm-10"><input class="form-control" name="Channel" type="text" '+setStrValue("", json["Channel"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["QueryLengthByChannelRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildQueryLengthByChannelRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./QueryLengthByChannel?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlQueues) QueryLengthByChannel(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Queues`, `QueryLengthByChannel`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &QueryLengthByChannelRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormQueues_QueryLengthByChannel))
	if someValue {
		reply, err := this.client.QueryLengthByChannel(golang_org_x_net_context.Background(), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormQueues_ReportTaskResult string = `<div class="container"><div class="jumbotron">
	<h3>Queues: ReportTaskResult</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"ReportTaskResultRequest_RootKeyword": buildReportTaskResultRequest_RootKeyword(emptyIfNull(null)),}
	function buildReportTaskResultRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="ReportTaskResultRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">ID: </label><div class="col-sm-10"><input class="form-control" name="ID" type="number" step="1" '+setValue(0, json["ID"])+'/></div></div>';
				
s += '<div class="field form-group"><label class="col-sm-2 control-label">State: </label><div class="col-sm-10">';
					s += '<select class="form-control" name="State">';
					s += 	'<option value="0" ' + selected(0, 0, json["State"]) + '>UNKNOWN</option>';
						s += 	'<option value="1" ' + selected(0, 1, json["State"]) + '>SUCCESS</option>';
						s += 	'<option value="2" ' + selected(0, 2, json["State"]) + '>FAILURE</option>';
						s += 	'<option value="3" ' + selected(0, 3, json["State"]) + '>REPEAT</option>';
						s += 	'<option value="4" ' + selected(0, 4, json["State"]) + '>CANCEL</option>';
						s += 	'<option value="5" ' + selected(0, 5, json["State"]) + '>WAITING</option>';
						s += 	'<option value="6" ' + selected(0, 6, json["State"]) + '>PROCEEDING</option>';
						s += 	'<option value="7" ' + selected(0, 7, json["State"]) + '>NOT_EXIST</option>';
						s += 	'<option value="8" ' + selected(0, 8, json["State"]) + '>UNDEFINED</option>';
						s += 	'<option value="9" ' + selected(0, 9, json["State"]) + '>PROHIBITED</option>';
						s += 	'<option value="10" ' + selected(0, 10, json["State"]) + '>PARAMS_INVALID</option>';
						s += 	'<option value="11" ' + selected(0, 11, json["State"]) + '>CHANNEL_INVALID</option>';
						s += 	'<option value="12" ' + selected(0, 12, json["State"]) + '>DIAL_DB_FATLURE</option>';
						s += 	'<option value="13" ' + selected(0, 13, json["State"]) + '>DB_OPERATION_FATLURE</option>';
						s += '</select></div></div>';
					
s += '<div class="field form-group"><label class="col-sm-2 control-label">Output: </label><div class="col-sm-10"><input class="form-control" name="Output" type="text" '+setStrValue("", json["Output"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["ReportTaskResultRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildReportTaskResultRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./ReportTaskResult?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlQueues) ReportTaskResult(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Queues`, `ReportTaskResult`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &ReportTaskResultRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormQueues_ReportTaskResult))
	if someValue {
		bidi, err := this.client.ReportTaskResult(golang_org_x_net_context.Background())
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		err = bidi.Send(msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		reply, err := bidi.Recv()
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var FormQueues_ReceiveQueueByChannel string = `<div class="container"><div class="jumbotron">
	<h3>Queues: ReceiveQueueByChannel</h3>
	
	<form class="form-horizontal">
	<div id="form"><div class="children"></div></div>
    <a href="#" id="submit" class="btn btn-primary" role="button">Submit</a>
    </form>
    
	<script>

function addChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
}

function setChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var child = $(nodeFactory[myType]);
	activateLinks(child);
	$(">.children[type=" + myType + "]", thisNode).append(child);
$(">.tooltipper", thisNode).hide();
	$(this).hide();
}

function delChildNode(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var parentNode = thisNode.parents(".node:first");
	thisNode.remove();
	var setChildLink = $(">a.set-child[fieldname='" + thisNode.attr('fieldname') + "']", parentNode);
	if (setChildLink.length > 0) {
		setChildLink.show();
                $(">.tooltipper", parentNode).show();
	}
}

function delField(ev) {
	ev.preventDefault();
	var thisField = $(this).parents(".field:first");
	thisField.remove();
}

function addElem(ev) {
	ev.preventDefault();
	var thisNode = $(this).parents(".node:first");
	var myType = $(this).attr("type");
	var myFieldname = $(this).attr("fieldname");
	if (myType == "bool") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input name="' + myFieldname + '" type="checkbox" repeated="true"/></div><div class="col-sm-2"><a href="#" class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "number") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="1" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "text") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="text" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
	if (myType == "float") {
		var input = $('<div class="field form-group"><label class="col-sm-2 control-label">' + myFieldname + ': </label><div class="col-sm-8"><input class="form-control" name="' + myFieldname + '" type="number" step="any" repeated="true"/></div><div class="col-sm-2"><a href="#"  class="del-field btn btn-warning btn-sm" role="button">Remove</a></div></div>');
		$("a.del-field", input).click(delField);
		$("> .fields[fieldname='" + myFieldname + "']", thisNode).append(input);
	}
}

function getUrlParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
}

function activateLinks(node) {
 	$("a.add-child", node).click(addChildNode);
	$("a.set-child", node).click(setChildNode);
	$("a.add-elem", node).click(addElem);
	$("a.del-child", node).click(delChildNode);
	$("a.del-field", node).click(delField);
	$('label[type=checkbox]').click(function() {
	    if ($(this).hasClass('active')) {
	        $(this).removeClass('active');
	    } else {
	        $(this).addClass('active');
	    }
	});
	$('[data-toggle="tooltip"]', node).tooltip();
}

function getChildren(el) {
	var json = {};
	$("> .children > .node", el).each(function(idx, node) {
		var nodeJson = getFields($(node));
		var allChildren = getChildren($(node));
		for (childType in allChildren) {
			nodeJson[childType] = allChildren[childType];
		}
		var nodeType = $(node).attr("fieldname");
		var isRepeated = $(node).attr("repeated") == "true";
		if (isRepeated) {
			if (!(nodeType in json)) {
				json[nodeType] = [];
			}
			json[nodeType].push(nodeJson);
		} else {
			json[nodeType] = nodeJson;
		}
	});
	return json
}

function isInt(value) {
  return !isNaN(value) &&
         parseInt(Number(value)) == value &&
         !isNaN(parseInt(value, 10));
}

function replaceAll(str, search, replace) {
	return str.split(search).join(replace);
}

function escapeIllegal(str) {
	return replaceAll(replaceAll(replaceAll(str, "%", "%25"), "&", "%26"), "#", "%23");
}

function getFields(node) {
	var nodeJson = {};
	$("> div.field > div ", $(node)).each(function(idx, field) {
		$("> input[type=text]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = escapeIllegal($(input).val());
		});
		$("> input[type=number][step=any]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseFloat($(input).val());
		});
		$("> input[type=number][step=1]", $(field)).each(function(idx, input) {
			nodeJson[$(input).attr("name")] = parseInt($(input).val());
		});
		$("> div > label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var v = input.val();
			if (v == "true") {
				nodeJson[input.attr("name")] = true;
			} else if (v == "false") {
				nodeJson[input.attr("name")] = false;
			} else {
				nodeJson[input.attr("name")] = parseInt(input.val());
			}
		});
		$("> select", $(field)).each(function(idx, input) {
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[$(input).attr("name")] = parseInt(textvalue);
			} else {
				nodeJson[$(input).attr("name")] = escapeIllegal(textvalue);
			}
		});
	});
	$("> div.fields > div ", $(node)).each(function(idx, field) {
		$("input[type=text]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(escapeIllegal($(input).val()));
		});
		$("input[type=checkbox]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push($(input).is(':checked'));
		});
		$("input[type=number][step=any]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseFloat($(input).val()));
		});
		$("input[type=number][step=1]", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt($(input).val()));
		});
		$("label.active", $(field)).each(function(idx, label) {
                        var input = $("> input[type=radio]", $(label));
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			nodeJson[fieldname].push(parseInt(input.val()));
		});
		$("select", $(field)).each(function(idx, input) {
			var fieldname = $(input).attr("name");
			if (!(fieldname in nodeJson)) {
				nodeJson[fieldname] = [];
			}
			var textvalue = $(input).val();
			if (isInt(textvalue)) {
				nodeJson[fieldname].push(parseInt(textvalue));
			} else {
				nodeJson[fieldname].push(escapeIllegal(textvalue));
			}
		});
	});

	return nodeJson;
}

function radioed(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "checked"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "checked"
	}
	if (index == value) {
		return "checked"
	}
	return ""
}

function activeradio(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "active"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "active"
	}
	if (index == value) {
		return "active"
	}
	return ""
}

function checked(value) {
	if (value == undefined) {
		return ""
	}
	if (value == true) {
		return "checked='checked'"
	}
	return ""
}

function selected(def, index, value) {
	if (value == undefined) {
		if (def == index) {
			return "selected='selected'"
		}
		return ""
	}
	if (index == parseInt(value)) {
		return "selected='selected'"
	}
	if (index == value) {
		return "selected='selected'"
	}
	return ""
}

function emptyIfNull(json) {
	if (json == undefined || json == null) {
		return JSON.parse("{}");
	}
	return json;
}

function getValue(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("{}");
	}
	return value;
}

function getList(json, name) {
	var value = json[name];
	if (value == undefined) {
		return JSON.parse("[]");
	}
	return value;
}

function setLink(json, typ, fieldname, help) {
var display = "";
	if (json[fieldname] != undefined) {
display = 'style="display:none"';
}
        var tooltip = "";
        if (help.length > 0) {
		tooltip = '<a href="#" data-toggle="tooltip" ' + display + ' title="' + help + '" class="tooltipper"><span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span></a>';
        }
	if (json[fieldname] == undefined) {
		return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '">Set ' + fieldname + '</a>' + tooltip;
	}
	return '<a href="#" type="' + typ + '" class="set-child btn btn-success btn-sm" role="button" fieldname="' + fieldname + '" style="display: none;">Set ' + fieldname + '</a>';
}

function setValue(def, value) {
	if (value == undefined) {
		if (def.length == 0) {
			return ""
		}
		return 'value="' + def + '"'
	}
	return 'value="' + value + '"'
}

function setRepValue(value) {
	if (value == undefined) {
		return ""
	}
	return 'value="' + value + '"'
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

function decode_utf8(s) {
  return decodeURIComponent(escape(s));
}

function HTMLEncode(str){
  var i = str.length,
      aRet = [];

  while (i--) {
    var iC = str[i].charCodeAt();
    if (iC < 65 || iC > 127 || (iC>90 && iC<97)) {
      aRet[i] = '&#'+iC+';';
    } else {
      aRet[i] = str[i];
    }
   }
  return aRet.join('');
}


function setStrValue(def, value) {
	if (value == undefined) {
		if (def == undefined) {
			return ""
		}
		return "value=" + JSON.stringify(HTMLEncode(decode_utf8(def)));
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

function setRepStrValue(value) {
	if (value == undefined) {
		return ""
	}
	return "value=" + JSON.stringify(HTMLEncode(decode_utf8(value)));
}

var nodeFactory = {"ReceiveQueueByChannelRequest_RootKeyword": buildReceiveQueueByChannelRequest_RootKeyword(emptyIfNull(null)),}
	function buildReceiveQueueByChannelRequest_RootKeyword(json) {
if (json == undefined) {
		return "";
	}
	
var s = '<div class="node" type="ReceiveQueueByChannelRequest_RootKeyword" fieldname="RootKeyword" repeated="false">';
s += '<div class="field form-group"><label class="col-sm-2 control-label">Channel: </label><div class="col-sm-10"><input class="form-control" name="Channel" type="text" '+setStrValue("", json["Channel"])+'/></div></div>';
				

			s += '</div>';
			var node = $(s);
			activateLinks(node);
			return node;
		}function init() {
	var root = $(nodeFactory["ReceiveQueueByChannelRequest_RootKeyword"]);
	var jsonText = getUrlParameter("json");
	if (jsonText == undefined) {
		var json = emptyIfNull(null);
	} else {
		var json = JSON.parse(unescape(jsonText));
	}
	$("#form > .children").html(buildReceiveQueueByChannelRequest_RootKeyword(json));
	activateLinks(root);
	$("a[id=submit]").click(function(ev) {
		ev.preventDefault();
		c = getChildren($("#form"));
		j = JSON.stringify(c["RootKeyword"]);
		window.location.assign("./ReceiveQueueByChannel?json="+j);
	});
}

	init();

	</script>

	<style>

	.node{
		padding-left: 2em;
		min-height:20px;
	    padding:10px;
	    margin-top:10px;
	    margin-bottom:20px;
	    //border-left:0.5px solid #999;
	    -webkit-border-radius:4px;
	    -moz-border-radius:4px;
	    border-radius:4px;
	    -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    -moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);
	    background-color:#eaeaea;
	}

	.node .node {
		background-color:#e2e2e2;
	}

	.node .node .node {
		background-color:#d9d9d9;
	}

	.node .node .node .node {
		background-color:#d1d1d1;
	}

	.node .node .node .node .node {
		background-color:#c7c7c7;
	}

	.node .node .node .node .node .node {
		background-color:#c0c0c0;
	}

	label{
	        font-weight: normal;
	}

	.heading {
		font-weight: bold;
	}

	</style>
	
	</div>`

func (this *htmlQueues) ReceiveQueueByChannel(w net_http.ResponseWriter, req *net_http.Request) {
	w.Write([]byte(Header(`Queues`, `ReceiveQueueByChannel`)))
	jsonString := req.FormValue("json")
	someValue := false
	msg := &ReceiveQueueByChannelRequest{}
	if len(jsonString) > 0 {
		err := encoding_json.Unmarshal([]byte(jsonString), msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		someValue = true
	}
	w.Write([]byte(FormQueues_ReceiveQueueByChannel))
	if someValue {
		bidi, err := this.client.ReceiveQueueByChannel(golang_org_x_net_context.Background())
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		err = bidi.Send(msg)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		reply, err := bidi.Recv()
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		out, err := this.stringer(msg, reply)
		if err != nil {
			if err != io.EOF {
				w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
				return
			}
			w.Write([]byte("<div class=\"alert alert-danger\" role=\"alert\">" + err.Error() + "</div>"))
		}
		w.Write(out)
	}
	w.Write([]byte(Footer))
}

var Header func(servName, methodName string) string = func(servName, methodName string) string {
	return `
	<html>
	<head>
	<title>` + servName + `:` + methodName + `</title>
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
	</head>
	<body>
	`
}
var Footer string = `
	</body>
	</html>
	`
